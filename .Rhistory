for (i in 1:length(rt_patterns))
{
# get tweet with retweet entity
twit = per4[rt_patterns[i],]
# get retweet source
poster = str_extract_all(twit$text,
"(RT|via)((?:\\b\\W*@\\w+)+)")
#remove ':'
poster = gsub(":", "", unlist(poster))
# name of retweeted user
who_post[[i]] = gsub("(RT @|via @)", "", poster, ignore.case=TRUE)
# name of retweeting user
who_retweet[[i]] = rep(twit$user.screen_name, length(poster))
}
# unlist results
who_post = unlist(who_post)
who_retweet = unlist(who_retweet)
# print(paste(length(unique(who_post)), " users retweeted by ", length(unique(who_retweet)), " users ", sep=""))
# Create graph from an edglist
# two column matrix of edges
retweeter_poster = cbind(who_retweet, who_post)
# generate graph
el.df4<-as.data.frame(retweeter_poster)
el.df4<-el.df4[order(el.df4$who_post),]
el.df4<-el.df4[-grep(" ", el.df4$who_post),]  # remove RTs of multiples
rownames(el.df4)<-NULL
write.csv(el.df4, "cleaned_data/migration_el4.csv")
##### Network Snapshot 5
# which tweets are retweets
rt_patterns = grep("(RT|via)((?:\\b\\W*@\\w+)+)",
per5$text, ignore.case=TRUE)
# Collect who retweeted and who posted
# We'll use these results to form an edge list in order to create the graph
# create list to store user names
who_retweet = as.list(1:length(rt_patterns))
who_post = as.list(1:length(rt_patterns))
# for loop
for (i in 1:length(rt_patterns))
{
# get tweet with retweet entity
twit = per5[rt_patterns[i],]
# get retweet source
poster = str_extract_all(twit$text,
"(RT|via)((?:\\b\\W*@\\w+)+)")
#remove ':'
poster = gsub(":", "", unlist(poster))
# name of retweeted user
who_post[[i]] = gsub("(RT @|via @)", "", poster, ignore.case=TRUE)
# name of retweeting user
who_retweet[[i]] = rep(twit$user.screen_name, length(poster))
}
# unlist results
who_post = unlist(who_post)
who_retweet = unlist(who_retweet)
# print(paste(length(unique(who_post)), " users retweeted by ", length(unique(who_retweet)), " users ", sep=""))
# Create graph from an edglist
# two column matrix of edges
retweeter_poster = cbind(who_retweet, who_post)
# generate graph
el.df5<-as.data.frame(retweeter_poster)
el.df5<-el.df5[order(el.df5$who_post),]
el.df5<-el.df5[-grep(" ", el.df5$who_post),]  # remove RTs of multiples
rownames(el.df5)<-NULL
write.csv(el.df5, "cleaned_data/migration_el5.csv")
setwd("~/Dropbox/gh_projects/migration_tweets/cleaned_data")
el.df1<-read.csv("migration_el1.csv") # read in edgelist
el.df2<-read.csv("migration_el2.csv") # read in edgelist
el.df3<-read.csv("migration_el3.csv") # read in edgelist
el.df4<-read.csv("migration_el4.csv") # read in edgelist
el.df5<-read.csv("migration_el5.csv") # read in edgelist
setwd("~/Dropbox/gh_projects/migration_tweets")
el.df1<-el.df1[,2:3]
el.df2<-el.df2[,2:3]
el.df3<-el.df3[,2:3]
el.df4<-el.df4[,2:3]
el.df5<-el.df5[,2:3]
rt_graph2.1 = graph.edgelist(as.matrix(el.df1), directed=TRUE)
rt_graph2.2 = graph.edgelist(as.matrix(el.df2), directed=TRUE)
rt_graph2.3 = graph.edgelist(as.matrix(el.df3), directed=TRUE)
rt_graph2.4 = graph.edgelist(as.matrix(el.df4), directed=TRUE)
rt_graph2.5 = graph.edgelist(as.matrix(el.df5), directed=TRUE)
# Make and plot graph
rt_graph2.1 = delete.vertices(rt_graph2.1, V(rt_graph2.1)[ degree(rt_graph2.1)<=1 ])
rt_graph2.2 = delete.vertices(rt_graph2.2, V(rt_graph2.2)[ degree(rt_graph2.2)<=1 ])
rt_graph2.3 = delete.vertices(rt_graph2.3, V(rt_graph2.3)[ degree(rt_graph2.3)<=1 ])
rt_graph2.4 = delete.vertices(rt_graph2.4, V(rt_graph2.4)[ degree(rt_graph2.4)<=1 ])
rt_graph2.5 = delete.vertices(rt_graph2.5, V(rt_graph2.5)[ degree(rt_graph2.5)<=1 ])
V(rt_graph2.1)$color[betweenness(rt_graph2.1)>1000] =  rgb(1,0,0,1)
V(rt_graph2.2)$color[betweenness(rt_graph2.2)>1000] =  rgb(1,0,0,1)
V(rt_graph2.3)$color[betweenness(rt_graph2.3)>1000] =  rgb(1,0,0,1)
V(rt_graph2.4)$color[betweenness(rt_graph2.4)>1000] =  rgb(1,0,0,1)
V(rt_graph2.5)$color[betweenness(rt_graph2.5)>1000] =  rgb(1,0,0,1)
V(rt_graph2.1)$color[evcent(rt_graph2.1)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.2)$color[evcent(rt_graph2.2)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.3)$color[evcent(rt_graph2.3)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.4)$color[evcent(rt_graph2.4)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.5)$color[evcent(rt_graph2.5)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.1)$size = 2
V(rt_graph2.2)$size = 2
V(rt_graph2.3)$size = 2
V(rt_graph2.4)$size = 2
V(rt_graph2.5)$size = 2
V(rt_graph2.1)$label[evcent(rt_graph2.1)$vector>.3] = V(rt_graph2.1)$name[evcent(rt_graph2.1)$vector>.3]
V(rt_graph2.2)$label[evcent(rt_graph2.2)$vector>.3] = V(rt_graph2.2)$name[evcent(rt_graph2.2)$vector>.3]
V(rt_graph2.3)$label[evcent(rt_graph2.3)$vector>.3] = V(rt_graph2.3)$name[evcent(rt_graph2.3)$vector>.3]
V(rt_graph2.4)$label[evcent(rt_graph2.4)$vector>.3] = V(rt_graph2.4)$name[evcent(rt_graph2.4)$vector>.3]
V(rt_graph2.5)$label[evcent(rt_graph2.5)$vector>.3] = V(rt_graph2.5)$name[evcent(rt_graph2.5)$vector>.3]
V(rt_graph2.1)$label[betweenness(rt_graph2.1)>1000] = V(rt_graph2.1)$name[betweenness(rt_graph2.1)>1000]
V(rt_graph2.2)$label[betweenness(rt_graph2.2)>1000] = V(rt_graph2.2)$name[betweenness(rt_graph2.2)>1000]
V(rt_graph2.3)$label[betweenness(rt_graph2.3)>1000] = V(rt_graph2.3)$name[betweenness(rt_graph2.3)>1000]
V(rt_graph2.4)$label[betweenness(rt_graph2.4)>1000] = V(rt_graph2.4)$name[betweenness(rt_graph2.4)>1000]
V(rt_graph2.5)$label[betweenness(rt_graph2.5)>1000] = V(rt_graph2.5)$name[betweenness(rt_graph2.5)>1000]
V(rt_graph2.1)$label.cex = 1.2
V(rt_graph2.2)$label.cex = 1.2
V(rt_graph2.3)$label.cex = 1.2
V(rt_graph2.4)$label.cex = 1.2
V(rt_graph2.5)$label.cex = 1.2
E(rt_graph2.1)$width = .3
E(rt_graph2.2)$width = .3
E(rt_graph2.3)$width = .3
E(rt_graph2.4)$width = .3
E(rt_graph2.5)$width = .3
E(rt_graph2.1)$color = rgb(.5,.5,0,.1)
E(rt_graph2.2)$color = rgb(.5,.5,0,.1)
E(rt_graph2.3)$color = rgb(.5,.5,0,.1)
E(rt_graph2.4)$color = rgb(.5,.5,0,.1)
E(rt_graph2.5)$color = rgb(.5,.5,0,.1)
set.seed(4074)
par(bg="white", mar=c(1,1,1,1), mfrow=c(2,3))
plot.igraph(rt_graph2.1, layout=layout.fruchterman.reingold, vertex.label.color= "white", main="Snapshot 1")
plot.igraph(rt_graph2.2, layout=layout.fruchterman.reingold, vertex.label.color= "white", main="Snapshot 2")
plot.igraph(rt_graph2.3, layout=layout.fruchterman.reingold, vertex.label.color= "white", main="Snapshot 3")
plot.igraph(rt_graph2.4, layout=layout.fruchterman.reingold, vertex.label.color= "white", main="Snapshot 4")
plot.igraph(rt_graph2.5, layout=layout.fruchterman.reingold, vertex.label.color= "white", main="Snapshot 5")
set.seed(4074)
par(bg="white", mar=c(1,1,1,1), mfrow=c(2,3))
plot.igraph(rt_graph2.1, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="Snapshot 1")
plot.igraph(rt_graph2.2, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="Snapshot 2")
plot.igraph(rt_graph2.3, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="Snapshot 3")
plot.igraph(rt_graph2.4, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="Snapshot 4")
plot.igraph(rt_graph2.5, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="Snapshot 5")
df$cleantext<-gsub('http.* *', ' ', df$text)
df$cleantext<-str_replace_all(df$cleantext, "[^[:alnum:]]", " ")
corp<-Corpus(VectorSource(df$cleantext))
corp <- tm_map(corp, removeNumbers)
corp <- tm_map(corp, removePunctuation)
corp <- tm_map(corp, stripWhitespace)
my_stopwords <- c(stopwords('english'), paste(unique(df$screenName)))
corp <- tm_map(corp, removeWords, my_stopwords)
corp <- tm_map(corp, tolower)
corp.full<-corp
corp <- tm_map(corp, stemDocument, language = "english") #reduce all English words to their roots
# other_stop_words<-c("psa", "polit", "rt", "panel", "amp", "politicalspik", "angeliawilson",
#                     "politicsir", "peterjohn", "the")
# corp <- tm_map(corp, removeWords, other_stop_words)   # remove specific word (the hashtag of interest)
dtm <-DocumentTermMatrix(corp) # make a matrix of each document by every single term
dtm <- removeSparseTerms(dtm, 0.99)
terms<-as.data.frame(sort(colSums(inspect(dtm)), decreasing=TRUE))
terms$Term <- rownames(terms)
names(terms)<-c("Frequency", "Term")
rownames(terms) = NULL
terms[1:50,1:2]
?inspect
terms<-as.data.frame(sort(colSums(dtm), decreasing=TRUE))
terms<-as.data.frame(sort(colSums(summary(dtm)), decreasing=TRUE))
dtm
terms<-as.data.frame(sort(colSums(table(dtm)), decreasing=TRUE))
terms<-as.data.frame(sort(colSums(dtm), decreasing=TRUE))
terms<-as.data.frame(sort(colSums(inspect(dtm)), decreasing=TRUE))
terms$Term <- rownames(terms)
names(terms)<-c("Frequency", "Term")
rownames(terms) = NULL
terms[1:50,1:2]
setwd("~/Dropbox/gh_projects/migration_tweets/preliminary")
hu.liu.pos=scan("positive-words.txt",what='character',comment.char=';') #load +ve sentiment word list
hu.liu.neg=scan("negative-words.txt",what='character',comment.char=';') #load -ve sentiment word list
pos.words=c(hu.liu.pos)
neg.words=c(hu.liu.neg)
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
corp.full<-unlist(corp.full)
corp.scores<-score.sentiment(corp.full,pos.words,neg.words,.progress='text') # get scores for the tweet text
ggplot(corp.scores, aes(x=score)) + geom_histogram(binwidth=1) + xlab("Sentiment score") + ylab("Frequency") + theme_bw() + ggtitle("The Distribution of Sentiment")
corp.pos<-subset(corp.scores,corp.scores$score>=4) # get tweets with only very +ve scores
corp.neg<-subset(corp.scores,corp.scores$score<=-4) # get tweets with only very -ve scores
mean(corp.scores$score)
corp.pos[1:30,]
corp.neg[1:30,]
View(corp.pos)
corp.pos$text[1:30,]
View(corp.pos)
corp.pos$text[1:30,]
corp.pos$text[1:30]
setwd("~/Dropbox/gh_projects/migration_tweets")
require(jsonlite)
require(lubridate)
require(ggplot2)
require(twitteR)
require(stringr)
library(igraph)
require(tm)
#require(Snowball)
require(RColorBrewer)
# df <- fromJSON("output.json", flatten=TRUE)
# df<-df[complete.cases(df["user.screen_name"]),]
# save(df, file="cleaned_data/complete.RData")
load("cleaned_data/complete.RData")
df$time<-as.POSIXct(dmy_hms(substr(df$created_at, 6, 25))) # Doesnt work, need to wrangle date
# random<-df[sample(nrow(df), 1000), ]
# random<-subset(random, select=c("user.screen_name", "user.description", "created_at", "text", "time"))
# random<-random[order(random$time),]
# write.csv(random, file="cleaned_data/random_sample.csv")
time.series<-ggplot(data=df, aes(x=time)) +
geom_bar(aes(fill=..count..)) +
theme_bw() +
labs(y="Tweets", x="Month", title="Tweets about Romanian and Bulgarian , 10/2013 - 02/2014")
time.series
counts<-as.data.frame(table(df$user.screen_name))
counts<-subset(counts, Freq>85)
rownames(counts)<-NULL
counts$Var1<-factor(counts$Var1)
frequencies<-ggplot(data=counts, aes(x=reorder(Var1, Freq), y=Freq)) +
geom_point(stat="identity") +
labs(x="Username", y="Number of Tweets", title="Most Frequent Tweeters") +
theme_bw() +
coord_flip()
frequencies
df$text=sapply(df$text,function(row) iconv(row,to='UTF-8')) #remove odd characters
trim <- function (x) sub('@','',x) # remove @ symbol from user names
# extract who's been retweeted by whom
df$rt=sapply(df$text,function(tweet) trim(str_match(tweet,"^RT (@[[:alnum:]_]*)")[2]))
totalrts<-sum(!is.na(df$rt)) # see how many tweets are retweets
# sum(!is.na(df$rt))/length(df$rt) # the ratio of retweets to tweets
countRT<-table(df$rt)
countRT<-sort(countRT)
countRT.subset=subset(countRT,countRT>=4) # subset those RT’d more than 5 times
countRT.subset.df<-data.frame(people=as.factor(unlist(dimnames(countRT.subset))),RT_count=as.numeric(unlist(countRT.subset)))
retweets<-ggplot(countRT.subset.df, aes(reorder(people,RT_count),RT_count)) +
xlab("Username") + ylab("Number of Retweets Received") +
ggtitle("Most Retweeted Users") +
geom_point(stat="identity") + coord_flip() + theme_bw()
retweets
t<-as.data.frame(table(df$user.screen_name)) # make table with counts of tweets per person
rt<-as.data.frame(table(df$rt)) # make table with counts of retweets per person
t.rt<-merge(t,rt,by="Var1") # combine tweet count and retweet count per person
t.rt["ratio"]<-t.rt$Freq.y / t.rt$Freq.x # creates new col and adds ratio tweet/retweet
sort.t.rt<-t.rt[order(t.rt$ratio),] # sort it to put names in order by ratio
sort.t.rt.subset<-subset(sort.t.rt,sort.t.rt$Freq.y>3) # exclude those with less than 5 tweets
sort.t.rt.subset.drop<-droplevels(sort.t.rt.subset) # drop unused levels that got in there
ratios<-ggplot(sort.t.rt.subset, aes(reorder(Var1,ratio),ratio)) +
xlab("Username") + ylab("Ratio of Retweets to Total Tweets") +
ggtitle("Most Retweeted Users") +
geom_point(stat="identity") + coord_flip() + theme_bw()
ratios
df$link=sapply(df$text,function(tweet) str_extract(tweet,("http[[:print:]]+"))) # creates new field and extracts the links contained in the tweet
df$link=sapply(df$text,function(tweet) str_extract(tweet,"http[[:print:]]{16}")) # limits to just 16 characters after http so I just get the shortened link. They are all shortened, so this is fine, but there might be a better way using regex.
countlink<-table(df$link) # get frequencies of each link
countlink<-sort(countlink) # sort them
countlink<-data.frame(table(na.omit((df$link))))
countlink<-subset(countlink,countlink$Freq>40) # exclude those with 300 tweets or less
links<-ggplot(countlink, aes(reorder(Var1, Freq), Freq)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("Link") + ylab("Frequency") +
labs(title="Most Shared Links")
links
setwd("~/Dropbox/gh_projects/migration_tweets/cleaned_data")
el.df<-read.csv("migration_el.csv") # read in edgelist
setwd("~/Dropbox/gh_projects/migration_tweets")
el.df<-el.df[,2:3]
rt_graph2 = graph.edgelist(as.matrix(el.df), directed=TRUE)
# Make and plot graph
rt_graph2 = delete.vertices(rt_graph2, V(rt_graph2)[ degree(rt_graph2)==0 ])
V(rt_graph2)$color[betweenness(rt_graph2)>2000] =  rgb(1,0,0,1)
V(rt_graph2)$color[evcent(rt_graph2)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2)$size = 2
V(rt_graph2)$label[evcent(rt_graph2)$vector>.3] = V(rt_graph2)$name[evcent(rt_graph2)$vector>.3]
V(rt_graph2)$label[betweenness(rt_graph2)>2000] = V(rt_graph2)$name[betweenness(rt_graph2)>2000]
V(rt_graph2)$label.cex = 1.2
E(rt_graph2)$width = .3
E(rt_graph2)$color = rgb(.5,.5,0,.1)
set.seed(4074)
par(bg="white", mar=c(1,1,1,1))
plot.igraph(rt_graph2, layout=layout.fruchterman.reingold, vertex.label.color= "white", main="Whole Retweet Network")
cent<-data.frame(bet=betweenness(rt_graph2),eig=evcent(rt_graph2)$vector)
res<-lm(eig~bet,data=cent)$residuals
cent<-transform(cent,res=res)
set.seed(4074)
key.accounts<-ggplot(cent,aes(x=bet,y=eig,
label=rownames(cent),colour=res)) +
xlab("Betweenness Centrality") +
ylab("Eigenvector Centrality") +
labs(title="Key Twitter Accounts") +
theme_bw() +
geom_text(size=6, position = position_jitter(width = 300, height=.15))
key.accounts
setwd("~/Dropbox/gh_projects/migration_tweets/cleaned_data")
el.df1<-read.csv("migration_el1.csv") # read in edgelist
el.df2<-read.csv("migration_el2.csv") # read in edgelist
el.df3<-read.csv("migration_el3.csv") # read in edgelist
el.df4<-read.csv("migration_el4.csv") # read in edgelist
el.df5<-read.csv("migration_el5.csv") # read in edgelist
setwd("~/Dropbox/gh_projects/migration_tweets")
el.df1<-el.df1[,2:3]
el.df2<-el.df2[,2:3]
el.df3<-el.df3[,2:3]
el.df4<-el.df4[,2:3]
el.df5<-el.df5[,2:3]
rt_graph2.1 = graph.edgelist(as.matrix(el.df1), directed=TRUE)
rt_graph2.2 = graph.edgelist(as.matrix(el.df2), directed=TRUE)
rt_graph2.3 = graph.edgelist(as.matrix(el.df3), directed=TRUE)
rt_graph2.4 = graph.edgelist(as.matrix(el.df4), directed=TRUE)
rt_graph2.5 = graph.edgelist(as.matrix(el.df5), directed=TRUE)
# Make and plot graph
rt_graph2.1 = delete.vertices(rt_graph2.1, V(rt_graph2.1)[ degree(rt_graph2.1)<=1 ])
rt_graph2.2 = delete.vertices(rt_graph2.2, V(rt_graph2.2)[ degree(rt_graph2.2)<=1 ])
rt_graph2.3 = delete.vertices(rt_graph2.3, V(rt_graph2.3)[ degree(rt_graph2.3)<=1 ])
rt_graph2.4 = delete.vertices(rt_graph2.4, V(rt_graph2.4)[ degree(rt_graph2.4)<=1 ])
rt_graph2.5 = delete.vertices(rt_graph2.5, V(rt_graph2.5)[ degree(rt_graph2.5)<=1 ])
V(rt_graph2.1)$color[betweenness(rt_graph2.1)>1000] =  rgb(1,0,0,1)
V(rt_graph2.2)$color[betweenness(rt_graph2.2)>1000] =  rgb(1,0,0,1)
V(rt_graph2.3)$color[betweenness(rt_graph2.3)>1000] =  rgb(1,0,0,1)
V(rt_graph2.4)$color[betweenness(rt_graph2.4)>1000] =  rgb(1,0,0,1)
V(rt_graph2.5)$color[betweenness(rt_graph2.5)>1000] =  rgb(1,0,0,1)
V(rt_graph2.1)$color[evcent(rt_graph2.1)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.2)$color[evcent(rt_graph2.2)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.3)$color[evcent(rt_graph2.3)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.4)$color[evcent(rt_graph2.4)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.5)$color[evcent(rt_graph2.5)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.1)$size = 2
V(rt_graph2.2)$size = 2
V(rt_graph2.3)$size = 2
V(rt_graph2.4)$size = 2
V(rt_graph2.5)$size = 2
V(rt_graph2.1)$label[evcent(rt_graph2.1)$vector>.3] = V(rt_graph2.1)$name[evcent(rt_graph2.1)$vector>.3]
V(rt_graph2.2)$label[evcent(rt_graph2.2)$vector>.3] = V(rt_graph2.2)$name[evcent(rt_graph2.2)$vector>.3]
V(rt_graph2.3)$label[evcent(rt_graph2.3)$vector>.3] = V(rt_graph2.3)$name[evcent(rt_graph2.3)$vector>.3]
V(rt_graph2.4)$label[evcent(rt_graph2.4)$vector>.3] = V(rt_graph2.4)$name[evcent(rt_graph2.4)$vector>.3]
V(rt_graph2.5)$label[evcent(rt_graph2.5)$vector>.3] = V(rt_graph2.5)$name[evcent(rt_graph2.5)$vector>.3]
V(rt_graph2.1)$label[betweenness(rt_graph2.1)>1000] = V(rt_graph2.1)$name[betweenness(rt_graph2.1)>1000]
V(rt_graph2.2)$label[betweenness(rt_graph2.2)>1000] = V(rt_graph2.2)$name[betweenness(rt_graph2.2)>1000]
V(rt_graph2.3)$label[betweenness(rt_graph2.3)>1000] = V(rt_graph2.3)$name[betweenness(rt_graph2.3)>1000]
V(rt_graph2.4)$label[betweenness(rt_graph2.4)>1000] = V(rt_graph2.4)$name[betweenness(rt_graph2.4)>1000]
V(rt_graph2.5)$label[betweenness(rt_graph2.5)>1000] = V(rt_graph2.5)$name[betweenness(rt_graph2.5)>1000]
V(rt_graph2.1)$label.cex = 1.2
V(rt_graph2.2)$label.cex = 1.2
V(rt_graph2.3)$label.cex = 1.2
V(rt_graph2.4)$label.cex = 1.2
V(rt_graph2.5)$label.cex = 1.2
E(rt_graph2.1)$width = .3
E(rt_graph2.2)$width = .3
E(rt_graph2.3)$width = .3
E(rt_graph2.4)$width = .3
E(rt_graph2.5)$width = .3
E(rt_graph2.1)$color = rgb(.5,.5,0,.1)
E(rt_graph2.2)$color = rgb(.5,.5,0,.1)
E(rt_graph2.3)$color = rgb(.5,.5,0,.1)
E(rt_graph2.4)$color = rgb(.5,.5,0,.1)
E(rt_graph2.5)$color = rgb(.5,.5,0,.1)
set.seed(4074)
par(bg="white", mar=c(1,1,1,1), mfrow=c(2,3))
plot.igraph(rt_graph2.1, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="T1")
plot.igraph(rt_graph2.1, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="T1")
V(rt_graph2.1)$label[evcent(rt_graph2.1)$vector>.2] = V(rt_graph2.1)$name[evcent(rt_graph2.1)$vector>.2]
V(rt_graph2.2)$label[evcent(rt_graph2.2)$vector>.2] = V(rt_graph2.2)$name[evcent(rt_graph2.2)$vector>.2]
V(rt_graph2.3)$label[evcent(rt_graph2.3)$vector>.2] = V(rt_graph2.3)$name[evcent(rt_graph2.3)$vector>.2]
V(rt_graph2.4)$label[evcent(rt_graph2.4)$vector>.2] = V(rt_graph2.4)$name[evcent(rt_graph2.4)$vector>.2]
V(rt_graph2.5)$label[evcent(rt_graph2.5)$vector>.2] = V(rt_graph2.5)$name[evcent(rt_graph2.5)$vector>.2]
V(rt_graph2.1)$label[betweenness(rt_graph2.1)>800] = V(rt_graph2.1)$name[betweenness(rt_graph2.1)>800]
V(rt_graph2.2)$label[betweenness(rt_graph2.2)>800] = V(rt_graph2.2)$name[betweenness(rt_graph2.2)>800]
V(rt_graph2.3)$label[betweenness(rt_graph2.3)>800] = V(rt_graph2.3)$name[betweenness(rt_graph2.3)>800]
V(rt_graph2.4)$label[betweenness(rt_graph2.4)>800] = V(rt_graph2.4)$name[betweenness(rt_graph2.4)>800]
V(rt_graph2.5)$label[betweenness(rt_graph2.5)>800] = V(rt_graph2.5)$name[betweenness(rt_graph2.5)>800]
V(rt_graph2.1)$label.cex = 1.2
V(rt_graph2.2)$label.cex = 1.2
V(rt_graph2.3)$label.cex = 1.2
V(rt_graph2.4)$label.cex = 1.2
V(rt_graph2.5)$label.cex = 1.2
E(rt_graph2.1)$width = .3
E(rt_graph2.2)$width = .3
E(rt_graph2.3)$width = .3
E(rt_graph2.4)$width = .3
E(rt_graph2.5)$width = .3
E(rt_graph2.1)$color = rgb(.5,.5,0,.1)
E(rt_graph2.2)$color = rgb(.5,.5,0,.1)
E(rt_graph2.3)$color = rgb(.5,.5,0,.1)
E(rt_graph2.4)$color = rgb(.5,.5,0,.1)
E(rt_graph2.5)$color = rgb(.5,.5,0,.1)
plot.igraph(rt_graph2.1, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="T1")
setwd("~/Dropbox/gh_projects/migration_tweets/cleaned_data")
el.df1<-read.csv("migration_el1.csv") # read in edgelist
el.df2<-read.csv("migration_el2.csv") # read in edgelist
el.df3<-read.csv("migration_el3.csv") # read in edgelist
el.df4<-read.csv("migration_el4.csv") # read in edgelist
el.df5<-read.csv("migration_el5.csv") # read in edgelist
setwd("~/Dropbox/gh_projects/migration_tweets")
el.df1<-el.df1[,2:3]
el.df2<-el.df2[,2:3]
el.df3<-el.df3[,2:3]
el.df4<-el.df4[,2:3]
el.df5<-el.df5[,2:3]
rt_graph2.1 = graph.edgelist(as.matrix(el.df1), directed=TRUE)
rt_graph2.2 = graph.edgelist(as.matrix(el.df2), directed=TRUE)
rt_graph2.3 = graph.edgelist(as.matrix(el.df3), directed=TRUE)
rt_graph2.4 = graph.edgelist(as.matrix(el.df4), directed=TRUE)
rt_graph2.5 = graph.edgelist(as.matrix(el.df5), directed=TRUE)
# Make and plot graph
rt_graph2.1 = delete.vertices(rt_graph2.1, V(rt_graph2.1)[ degree(rt_graph2.1)<=1 ])
rt_graph2.2 = delete.vertices(rt_graph2.2, V(rt_graph2.2)[ degree(rt_graph2.2)<=1 ])
rt_graph2.3 = delete.vertices(rt_graph2.3, V(rt_graph2.3)[ degree(rt_graph2.3)<=1 ])
rt_graph2.4 = delete.vertices(rt_graph2.4, V(rt_graph2.4)[ degree(rt_graph2.4)<=1 ])
rt_graph2.5 = delete.vertices(rt_graph2.5, V(rt_graph2.5)[ degree(rt_graph2.5)<=1 ])
V(rt_graph2.1)$color[betweenness(rt_graph2.1)>1000] =  rgb(1,0,0,1)
V(rt_graph2.2)$color[betweenness(rt_graph2.2)>1000] =  rgb(1,0,0,1)
V(rt_graph2.3)$color[betweenness(rt_graph2.3)>1000] =  rgb(1,0,0,1)
V(rt_graph2.4)$color[betweenness(rt_graph2.4)>1000] =  rgb(1,0,0,1)
V(rt_graph2.5)$color[betweenness(rt_graph2.5)>1000] =  rgb(1,0,0,1)
V(rt_graph2.1)$color[evcent(rt_graph2.1)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.2)$color[evcent(rt_graph2.2)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.3)$color[evcent(rt_graph2.3)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.4)$color[evcent(rt_graph2.4)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.5)$color[evcent(rt_graph2.5)$vector>.3] =  rgb(0,1,0,1)
V(rt_graph2.1)$size = 2
V(rt_graph2.2)$size = 2
V(rt_graph2.3)$size = 2
V(rt_graph2.4)$size = 2
V(rt_graph2.5)$size = 2
V(rt_graph2.1)$label[evcent(rt_graph2.1)$vector>.2] = V(rt_graph2.1)$name[evcent(rt_graph2.1)$vector>.2]
V(rt_graph2.2)$label[evcent(rt_graph2.2)$vector>.2] = V(rt_graph2.2)$name[evcent(rt_graph2.2)$vector>.2]
V(rt_graph2.3)$label[evcent(rt_graph2.3)$vector>.2] = V(rt_graph2.3)$name[evcent(rt_graph2.3)$vector>.2]
V(rt_graph2.4)$label[evcent(rt_graph2.4)$vector>.2] = V(rt_graph2.4)$name[evcent(rt_graph2.4)$vector>.2]
V(rt_graph2.5)$label[evcent(rt_graph2.5)$vector>.2] = V(rt_graph2.5)$name[evcent(rt_graph2.5)$vector>.2]
V(rt_graph2.1)$label[betweenness(rt_graph2.1)>800] = V(rt_graph2.1)$name[betweenness(rt_graph2.1)>800]
V(rt_graph2.2)$label[betweenness(rt_graph2.2)>800] = V(rt_graph2.2)$name[betweenness(rt_graph2.2)>800]
V(rt_graph2.3)$label[betweenness(rt_graph2.3)>800] = V(rt_graph2.3)$name[betweenness(rt_graph2.3)>800]
V(rt_graph2.4)$label[betweenness(rt_graph2.4)>800] = V(rt_graph2.4)$name[betweenness(rt_graph2.4)>800]
V(rt_graph2.5)$label[betweenness(rt_graph2.5)>800] = V(rt_graph2.5)$name[betweenness(rt_graph2.5)>800]
V(rt_graph2.1)$label.cex = 1.2
V(rt_graph2.2)$label.cex = 1.2
V(rt_graph2.3)$label.cex = 1.2
V(rt_graph2.4)$label.cex = 1.2
V(rt_graph2.5)$label.cex = 1.2
E(rt_graph2.1)$width = .3
E(rt_graph2.2)$width = .3
E(rt_graph2.3)$width = .3
E(rt_graph2.4)$width = .3
E(rt_graph2.5)$width = .3
E(rt_graph2.1)$color = rgb(.5,.5,0,.1)
E(rt_graph2.2)$color = rgb(.5,.5,0,.1)
E(rt_graph2.3)$color = rgb(.5,.5,0,.1)
E(rt_graph2.4)$color = rgb(.5,.5,0,.1)
E(rt_graph2.5)$color = rgb(.5,.5,0,.1)
plot.igraph(rt_graph2.1, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="T1")
plot.igraph(rt_graph2.2, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="T2")
V(rt_graph2.1)$label[betweenness(rt_graph2.1)>800]
plot.igraph(rt_graph2.1, layout=layout.fruchterman.reingold, vertex.label.color= "red", main="T1")
setwd("~/Dropbox/gh_projects/migration_tweets")
load("cleaned_data/complete.RData")
require(stringr)
require(igraph)
Sys.setlocale(locale="C")
names(df)
summary(df[1:27392,]$created_at)
summary(as.Date(df[1:27392,]$created_at))
summary(as.numeric(df[1:27392,]$created_at))
df[27392,]$created_at)
df[27392]$created_at)
df[27392,]$created_at
df[1,]$created_at
df[54786,]$created_at
df[27392,]$created_at
df[27392,]$created_at
df[54786,]$created_at
df[82177,]$created_at
df[54786,]$created_at
df[82177,]$created_at
df[109569,]$created_at
df[82178,]$created_at
df[82199,]$created_at
require(lubridate)
?dmy
ymd(df$created_at)
